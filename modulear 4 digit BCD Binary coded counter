module digit (
    input clk,
    input eb, //enables this current level counter for counting
    input reset,        // Synchronous active-high reset
    output [3:0] q
    ); //e enables the next level counter for counting
  
    always @(posedge clk)
        
        begin
     
    if(reset)
        q=0;
      
                 begin
        else if(~reset && eb)
            
                     case (q)
                         4'd9: begin

                                  q=4'd0;
                                end

                          default:
                                 begin
                                    q=q+1;     
                                  end   
                         endcase 
                       
              end//end of ~reset
          
    end//end of always

endmodule



module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q);
    
    reg [3:0] r1;
    reg [3:0] r2;
    reg [3:0]r3;
    reg [3:0]r4;
    reg eb1;
    reg eb2;
    reg eb3;
    reg eb4;
    
        
    digit instance1 (clk,1,reset,r1);
    assign q[3:0]=r1;
    assign eb2= r1[3]& ~r1[2]& ~r1[1]& r1[0];

    assign ena[1]=eb2;
    digit instance2 (clk,eb2,reset,r2);
    assign q[7:4]=r2;
    
    assign   eb3=r1[3]& ~r1[2]& ~r1[1]& r1[0]&r2[3]& ~r2[2]& ~r2[1]& r2[0];
    assign   ena[2]=eb3;
    digit instance3 (clk,eb3,reset,r3); 
     assign q[11:8]=r3;

    assign   eb4=r1[3]& ~r1[2]& ~r1[1]& r1[0]&&r2[3]& ~r2[2]& ~r2[1]& r2[0]&r3[3]& ~r3[2]& ~r3[1]& r3[0];
    assign ena[3]=eb4;
    digit instance4 (clk,eb4,reset,q[15:12]) ; 
    assign eb1= eb4&z4;

   
endmodule
